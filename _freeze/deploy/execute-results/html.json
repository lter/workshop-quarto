{
  "hash": "3e84a2342c6627df6688d789cca4e244",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Deploying a Website\"\n---\n\n\n\n\n## Module Learning Objectives\n\nBy the end of this module, you will be able to:\n\n- <u>Define</u> \"deploy\" in the context of Quarto websites\n- <u>Describe</u> the purpose of GitHub Actions (GHAs)\n- <u>Use</u> a GHA to deploy a Quarto website\n\n## Deployment Options\n\nUnder construction; check back later!\n\n## GitHub Actions (GHAs)\n\nUnder construction; check back later!\n\n## Set Up a Quarto Website Deployment GHA\n\n### 1. Make a `gh-pages` Branch\n\nGitHub \"branches\" are typically short-lived developent spaces that operate parallel to the 'main' branch of a repository. The main branch is either called `main` or `master` (for older repositories) and if you don't think you are using branches, you are at least using `main`! Branches are not the focus of this workshop but if you'd like to learn more, check out [the relevant module of the SciComp GitHub workshop](https://lter.github.io/workshop-github/branches.html).\n\nFor deploying a Quarto website though we'll create a `gh-pages` branch that we will never have to work on directly! Once this branch exists, we'll set up a GitHub action that renders your website into this branch and deploys from there. Doing this means you will rarely have to render your site on your machine and can instead trust the magic of GitHub Actions to transform your edits into a living website on its own.\n\nTo begin, **go to your repository's home page**. Once there, **click the \"1 Branch\" button**. It is in the same row of buttons as the \"Code\" button. Note that you can see your current branch name (likely `main`) just to the left of that button. \n\n<p align=\"center\"/>\n<img src=\"images/branch-01.png\" alt=\"Screenshot of the top of a GitHub repository's landing page\" width=\"100%\"/>\n</p>\n\nIn the resulting page, **click the \"New Branch\" button**. As with the \"Code\" button, it will be either **<span style=\"color:blue\">blue</span>** or **<span style=\"color:green\">green</span>** depending on your GitHub settings.\n\n<p align=\"center\"/>\n<img src=\"images/branch-02.png\" alt=\"Screenshot of the page in a GitHub repostiory where all active branches can be viewed\" width=\"100%\"/>\n</p>\n\nA small pop-up window will appear with an empty text field for you to enter the name of your branch. **Type _exactly_ \"gh-pages\" and click \"Create new branch\"**. The following steps will not work if you type something other than `gh-pages` (hyphen between \"gh\" and \"pages). Also note that you _can_ make the  \"gh-pages\" branch in RStudio and push it up to this repository but making this branch through GitHub and pulling it to your computer is more straightforward.\n\n<p align=\"center\"/>\n<img src=\"images/branch-03.png\" alt=\"Screenshot of the pop-up window where new branches are named before they are created\" width=\"50%\"/>\n</p>\n\nOnce you've done that, the pop-up window should close and you should find yourself back on the 'branches' page but there will now be two active branches: `main` (or `master`) and `gh-pages`!\n\n<p align=\"center\"/>\n<img src=\"images/branch-04.png\" alt=\"Screenshot of the page in a GitHub repostiory where all active branches can be viewed\" width=\"100%\"/>\n</p>\n\nYou can now return to your repository's landing page. You may see an **<span style=\"color:orange\">orange</span>** circle or a check mark that is either **<span style=\"color:blue\">blue</span>** or **<span style=\"color:green\">green</span>** next to the most recent commit message but we can safely ignore this for now.\n\n<p align=\"center\"/>\n<img src=\"images/branch-05.png\" alt=\"Screenshot of the top of a GitHub repository's landing page\" width=\"100%\"/>\n</p>\n\n### 2. Pull the New Branch\n\nReturn to your local clone of this repository (i.e., the relevant RStudio project) and pull. This should change nothing but now your RStudio 'knows' that the repository has two branches. Note that if you instead make the new branch in RStudio you'd instead push that branch up to GitHub at this point.\n\n### 3. Create the Local Part of a GHA\n\nNow that GitHub is properly set up, we need to define our desired GitHub Action. We do this by creating a new file locally in a particular file path then committing and pushing that file. Interestingly, the type of file that controls GHA settings is actually another YAML file!\n\nSo, <u>in the {{< fa terminal >}} Terminal pane of RStudio</u>, **run the following commands to create the needed file path and the GitHub Action's YAML file with the right name**. Note there is a slight difference depending on your operating system so be sure to use the right one!\n\n:::{.panel-tabset}\n#### {{< fa brands apple >}} Mac / {{< fa brands linux >}} Linux\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmkdir .github # <1>\nmkdir .github/workflows\ntouch .github/workflows/publish.yml \n```\n:::\n\n\n\n1. `mkdir` is CLI-speak for 'make this folder'\n\n#### {{< fa brands windows >}} Windows\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmkdir .github # <1>\nmkdir .github/workflows\ncopy NUL .github/workflows/publish.yml\n```\n:::\n\n\n\n1. `mkdir` is CLI-speak for 'make this folder'\n\n:::\n\nOne `publish.yml` exists on your computer, **use the \"Files\" pane of RStudio to navigate to the file and open it**. When you have it open, **copy/paste _all_ of the following into that file**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n:::\n\n\n\n\n### 4. Commit & Push `publish.yml` to GitHub\n\nOnce you have created `publish.yml` and put the necessary stuff into it, **commit the new file and push it**! Be sure that it is in the correct file path (i.e., \".github\" {{< fa arrow-right >}} \"workflows\" {{< fa arrow-right >}} \"publish.yml\").\n\n### 5. Watch the GitHub Action Work\n\nAfter you push `publish.yml`, return to your repository landing page and you should see an **<span style=\"color:orange\">orange</span>** circle next to that commit message.\n\n<p align=\"center\"/>\n<img src=\"images/gha-01.png\" alt=\"Screenshot of the top part of a GitHub repository's landing page while a GitHub Action is in progress\" width=\"100%\"/>\n</p>\n\nIf you **click the \"Actions\" tab** at the top of the repository's landing page you can get more specific information about the GitHub Action's progress.\n\n<p align=\"center\"/>\n<img src=\"images/gha-02.png\" alt=\"Screenshot of the 'Actions' tab of a GitHub repository while a GitHub Action is in progress\" width=\"100%\"/>\n</p>\n\nAt first, there will be a progress circle next to a \"workflow run\" that has the same name as the most recent commit. When that finishes it will be replaced by a check mark. Once this finishes, a new action called \"pages build and deployment\" will automatically start. Once _that_ action is done, you should have an updated website!\n\n<p align=\"center\"/>\n<img src=\"images/gha-03.png\" alt=\"Screenshot of the 'Actions' tab of a GitHub repository while a GitHub Action is complete\" width=\"100%\"/>\n</p>\n\nIf you don't want to watch the actions complete from the \"Actions\" tab, you can check their status from the repository landing page; a circle means one of those actions is in progress and a checkmark indicates they are finished.\n\n<p align=\"center\"/>\n<img src=\"images/gha-04.png\" alt=\"Screenshot of the top part of a GitHub repository's landing page after a GitHub Action is complete\" width=\"100%\"/>\n</p>\n\n### 6. Make the Website Link More Accessible\n\nAfter the GitHub Action completes, your website is live but you'll need to take an extra step to make that link directly accessible from the landing page of the repository. To start **click the gear ({{< fa gear >}}) icon next to \"About\" in the right sidebar of the repository**.\n\n<p align=\"center\"/>\n<img src=\"images/about-mod-01.png\" alt=\"Screenshot of the pop-up menu that allows editing the 'About' sidebar of a GitHub repository with all fields left at defaults\" width=\"60%\"/>\n</p>\n\nIn the resulting pop-up menu, **check the box for \"Use your GitHub Pages website\"** under the \"Website\" field. Feel free to customize the other fields however you'd like! When you're done, **click the \"Save changes\" button** to close this menu and update your \"About\" sidebar.\n\n<p align=\"center\"/>\n<img src=\"images/about-mod-03.png\" alt=\"Screenshot of the 'About' sidebar of a GitHub repository with a GitHub Pages website included\" width=\"40%\"/>\n</p>\n\nYou should now see the website in the \"About\" sidebar of the repository!\n\n### 7. Pull Updates Locally\n\nAs with any other time when you work in your GitHub repository, **you should now pull the latest changes to your local clone**. This is unlikely to be the cause of a conflict because (A) no files have changed since you last pushed and (B) the only edits in the `gh-pages` branch should be whatever the GitHub Action does behind the scenes. However, <u>it's still good practice to pull regularly</u>!\n\nRStudio should return a message like the following:\n\n<p align=\"center\"/>\n<img src=\"images/post-gha-pull-01.png\" alt=\"Screenshot of the message from RStudio when you pull after a GitHub Action is completed\" width=\"70%\"/>\n</p>\n\nEssentially this just means the your local `gh-pages` branch is now caught up with the website rendering / deployment that you set up GitHub to do on your behalf.\n\n## Activity - Try it Out\n\n:::{.callout-note}\n### Your Turn!\n\nLet's take a break while each of you works through the above tutorial on your own computers!\n\nOnce everyone has a working GitHub Action established we can move on to talking about how to add pages to the site and customize some formatting elements.\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}