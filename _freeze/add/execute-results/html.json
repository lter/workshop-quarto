{
  "hash": "0fb9aaa5b46e322c58ea7ff05bec793a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Add a Page to the Website\"\n---\n\n\n\n\n## Module Learning Objectives\n\nBy the end of this module, you will be able to:\n\n- <u>Create</u> a new page for an existing Quarto website\n\n## Create a New Page\n\n### 1. Make a `.qmd` File\n\nNow that you've created and deployed your website, adding content is straightforward! To add a page to your website, first **you'll create a new Quarto file** (\"File\" {{< fa arrow-right >}} \"New File\" {{< fa arrow-right >}} \"Quarto Document...\"). In the resulting pop-up menu you can leave everything at its default position and **click \"Create\"**.\n\nOnce the file exists, edit it as you see fit. **Make commits as you would normally but _do not_ push yet!**\n\n:::{.callout-note}\n#### File Name to Page Name\n\nWhile the website homepage file _had_ to be saved as `index.qmd`, **you can save this Quarto file as whatever makes sense to you!** For example:\n\n**<span style=\"color:green\">file</span>****.qmd**  &nbsp;&nbsp; {{< fa arrow-right >}} &nbsp;&nbsp; owner.github.io/repository/**<span style=\"color:green\">file</span>****.html**\n\n:::\n\n:::{.callout-note}\n#### Sub-Folders for Larger Websites\n\nIf you want to use sub-folders to organize your pages locally and keep the top-level of your GitHub repository nice and tidy, Quarto supports that! The URL produced from `.qmd` files placed in sub-folders will also include the folder name though, so be aware.\n\n**<span style=\"color:blue\">folder</span>**/**<span style=\"color:green\">file</span>****.qmd**  &nbsp;&nbsp; {{< fa arrow-right >}} &nbsp;&nbsp; owner.github.io/repository/**<span style=\"color:blue\">folder</span>**/**<span style=\"color:green\">file</span>****.html**\n\n:::\n\n### 2. Add the New Page to `_quarto.yml`\n\nFor this page to show up in your website, you need to edit `_quarto.yml` so that Quarto knows where your page should be linked (e.g., in the navbar, in a dropdown menu, etc.).\n\nIn RStudio, uses the \"Files\" pane to **open `quarto.yml` and add the new page to the relevant part of the YAML**. In the example below, the new file is `papers.qmd` and we want it to be accessible from the navigation bar at the top of the website from the word \"Publications\" (see lines 20-21).\n\n<p align=\"center\"/>\n<img src=\"images/new-page-yaml-edits-01.png\" alt=\"Screenshot of the YAML from a Quarto website where a new page has been linked from the navbar\" width=\"100%\"/>\n</p>\n\n:::{.callout-warning}\n#### Watch Out for Indentation!!\n\nWhile indentation does not affect R code, it <u>_absolutely_ affects YAML code</u>! A common source of error for Quarto websites is improper indentation for a new YAML element so double check the indentation of your additions against comparable rows that you know already work.\n\n:::\n\n### 3. Test it Locally\n\nTo make sure that everything is set up properly so far, it is good practice to create the website on your computer before continuing. We can do this with an operating system-agnostic {{< fa terminal >}} command line snippet.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto preview\n```\n:::\n\n\n\n\nIf something looks wrong, revisit the website YAML and your new file and edit them until the preview works as desired.\n\n:::{.callout-warning}\n#### Remember to End the Preview!\n\n**The preview will keep going until you manually stop it** so be sure to stop it (by click the stop sign icon in the Terminal pane in RStudio) when you're ready to move on.\n\n:::\n\n### 4. Render the Website\n\nOnce you're happy with the preview, completely render the website to make sure all of your most recent edits are reflected. You can do this with the following {{< fa terminal >}} command line code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto render\n```\n:::\n\n\n\n\n### 5. Commit & Push!\n\nOnce you've done the preceding steps, **Commit the following things: **\n\n1. Your new `.qmd` file\n2. Any changes to `_quarto.yml`\n3. Any changes to `_freeze/` \n    - If there are any\n\n**After you've committed these, push them up to the GitHub repository!**\n\n### 6. Allow the GitHub Action to Complete\n\nWait a minute or two for the GitHub Action to complete and you should be able to revisit your website and see the new page! The process for the GitHub Action is the same as it was when you first deployed your site so you can either watch the symbol on the repository landing page or get more granular information in the \"Actions\" tab of the GitHub repository.\n\n:::{.callout-warning}\n#### Site Not Updating? Refresh the Page!\n\nIf your site is not updating but you've followed the above steps (and the GitHub Action is finished), you might try closing the page and re-opening it or refreshing the page. Sometimes it takes a moment for updates to the site to be visible if you opened the page before the GitHub Action is complete or as it completes and refreshing the page can fix it in this case.\n\n:::\n\n## Activity - Try it Out\n\n:::{.callout-note}\n### Your Turn!\n\nLet's take a break while each of you adds a new page to your website!\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}