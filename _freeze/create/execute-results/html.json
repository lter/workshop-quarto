{
  "hash": "4ab57539eccb09f9063d941aba1a1126",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating a Website\"\n---\n\n## Module Learning Objectives\n\nBy the end of this module, you will be able to:\n\n- <u>Use</u> GitHub to make a new repository\n- <u>Create</u> a Quarto website\n- <u>Edit</u> files hosted on GitHub via RStudio\n\n## Make a New GitHub Repository\n\nFrom your GitHub **\"Repositories\"** tab, click the **\"New\"** button. It may be either **<span style=\"color:blue\">blue</span>** or **<span style=\"color:green\">green</span>** depending on your GitHub settings.\n\n<img src=\"images/new-github-1.png\" alt=\"Screen capture of top bit of 'Repositories' tab of a GitHub user's profile\" width=\"100%\" />\n\n**Pick a name** for your repository and **add a description**. Also, **set the repository to \"Public\"**; only public repositories can be turned into websites.\n\n:::{.callout-note}\n### Repository Names & Website URLs\n\nNote that the name you pick for your repository (and who owns it) has a big impact on the URL for the website hosted there! See an example below for how those pieces of information get translated.\n\ngithub.com/**<span style=\"color:purple\">owner</span>**/**<span style=\"color:orange\">repository</span>** &nbsp;&nbsp; {{< fa arrow-right >}} &nbsp;&nbsp; **<span style=\"color:purple\">owner</span>**.github.io/**<span style=\"color:orange\">repository</span>**\n\nSo, think about a repository name that will make your URL informative without being overly long if someone needs to type it manually.\n\n:::\n\n:::{.callout-warning}\n### Repository Name / URL Exception\n\nThere is one critical exception to the above rule for how the website URL is related to the GitHub repository's name!\n\nIf you name a repository \"**<span style=\"color:orange\">owner.github.io</span>**\" (so the repository link is \"github.com/**<span style=\"color:purple\">owner</span>**/**<span style=\"color:orange\">owner.github.io</span>**\") then the website's URL is simplified to be the _same as the repository name_ (i.e., \"**owner.github.io**\").\n\nFor example, the repository [github.com/njlyon0/njlyon0.github.io](https://github.com/njlyon0/njlyon0.github.io) hosts the website [njlyon0.github.io](https://njlyon0.github.io/).\n\n:::\n\n<p align=\"center\">\n<img src=\"images/new-github-2.png\" alt=\"Screen capture of the top half of the Github page where new repositories are created\" width=\"70%\" />\n</p>\n\nOnce that is done, scroll down and decide whether to add (1) a README, (2) a `.gitignore`, and (3) a license. For Quarto websites, **you will want a README and a `.gitignore`** but a license is not _required_. If you are an RStudio user, **you should pick the \"R\" template for your `.gitignore`**. For more information on READMEs see [here](https://lter.github.io/workshop-github/readmes.html); for more information on the `.gitignore` see [here](https://lter.github.io/workshop-github/git_ignore.html).\n\n<p align=\"center\">\n<img src=\"images/new-github-3.png\" alt=\"Screen capture of the bottom half of the Github page where new repositories are created\" width=\"70%\" />\n</p>\n\nOnce you've added these two things, scroll down and click the **\"Create repository\" button**. Again, this may be either **<span style=\"color:blue\">blue</span>** or **<span style=\"color:green\">green</span>**.\n\nAfter a few seconds you should be placed on your new repository's landing page.\n\n## Clone that Repository\n\nNow that you have created a repository, we need to clone it locally so we can create the content we want in RStudio. First, open RStudio and click the **project button** in the top right corner. If you use RStudio projects already, this will be the name of your current project. If you do not use projects it will say \"Project: (None)\".\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-1.png\" alt=\"Screen capture of the top right corner of RStudio when there is no active project\" width=\"60%\" />\n</p>\n\nWhen you click that button you should see a small menu appear. You should **click \"New Project...\"** (the topmost option). Note that if you use projects you'll see a list of up to the 10 most recent projects filling out the rest of this menu.\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-2.png\" alt=\"Screen capture of the top right corner of RStudio after the project button is clicked\" width=\"60%\" />\n</p>\n\nThis will create a pop-up window in front of RStudio where you can decide what kind of project you want to create. Because we're cloning from an existing GitHub repository, **click \"Version Control\"**.\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-3.png\" alt=\"Screen capture of the first pop-up window from RStudio when a new project is being created\" width=\"70%\" />\n</p>\n\nIn the next window, **choose \"Git\"**.\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-4.png\" alt=\"Screen capture of the second pop-up window from RStudio when a new project is being created from version control\" width=\"70%\" />\n</p>\n\nBefore we address the next dialog window, go back to the landing page for the GitHub repository you'd like to clone. **Click the \"Code\" button and _copy the link_**. The \"Code\" button will likely be either **<span style=\"color:blue\">blue</span>** or **<span style=\"color:green\">green</span>**. In the example image below we're using a repository that has just been created but the process is the same for repositories that already have work in them.\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-5.png\" alt=\"Screen capture of a GitHub repository with the 'Code' button clicked and the resulting menu open\" width=\"100%\" />\n</p>\n\nNow, return to RStudio and **paste the link that you just copied** into the top field of the new project pop-up menu. You must also **pick a name for your project locally** as well as **deciding where on your computer you'd like the local copies to live**. Feel free to name the project whatever you'd like so that you will be easily able to find it later.\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-6.png\" alt=\"Screen capture of a GitHub repository with the 'Code' button clicked and the resulting menu open\" width=\"70%\" />\n</p>\n\nOnce you're happy with your entries to those fields, **Click \"Create Project\"**. You'll know this has worked when the top right of RStudio has whatever name you entered in the second field of the preceding menu. Also, you should now have a \"Git\" tab in your RStudio.\n\n<p align=\"center\">\n<img src=\"images/rstudio-clone-7.png\" alt=\"Screen capture of the top right corner of RStudio when there is an active project\" width=\"60%\" />\n</p>\n\n## Start Creating the Website\n\nNow we've cloned the GitHub repository where we want the repository to live, we can create the critical website architecture. These steps are best handled sequentially but are semi-independent of one another so see the following numbered sub-headings for more instructions.\n\n### 1. Add to the `.gitignore`\n\nUsing the \"Files\" pane of RStudio, open the `.gitignore` file. Scroll to the bottom and add the following lines beneath whatever is already in there. Those two folders are important in creating a Quarto website but we don't want Git to track changes to the files that they contain.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ignore unneeded Quarto folders\n/.quarto/\ndocs/\n```\n:::\n\n\n:::{.callout-note}\n### Other Good `.gitignore` Additions\n\nYou might also consider adding the following to your `.gitignore`. This well help keep your repository free of unneeded contents as the website grows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R Project\n*.Rproj\n\n# Mac files\n.DS_Store\n```\n:::\n\n\n:::\n\n### 2. Create the Website Homepage\n\nNow we'll make what will become the home page of your website! **Create a new Quarto file** (\"File\" {{< fa arrow-right >}} \"New File\" {{< fa arrow-right >}} \"Quarto Document...\"). In the resulting pop-up menu you can leave everything at its default position and **click \"Create\"**.\n\n**Save that file as `index.qmd`**. Technically it doesn't matter where in your project folder it lives but typically you'd leave it in the top level folder (i.e., not in a sub-folder).\n\n:::{.callout-warning}\n#### Note on the File Name\n\nThis file must be named _exactly_ as indicated above. All lowercase \"index\" and it is a `.qmd` file.\n\n:::\n\n### 3. Make a YAML File\n\nNow, as discussed in the [Quarto Background](https://lter.github.io/workshop-quarto/background.html) module, Quarto documents--like many computational notebook files--are controlled by a YAML. In the case of RMarkdown, the YAML is a component of each `.Rmd` file. Quarto supports that functionality for single-file formatting but also supports a single over-arching YAML file to control the structure of a whole project, in this case: a website!\n\nSo, <u>in the {{< fa terminal >}} Terminal pane of RStudio</u>, **run the following command to create the needed type of file with the right name**. Note there is a slight difference depending on your operating system so be sure to use the right one!\n\n:::{.panel-tabset}\n#### {{< fa brands apple >}} Mac / {{< fa brands linux >}} Linux\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntouch _quarto.yml # <1>\n```\n:::\n\n1. `touch` is CLI-speak for 'create this file'\n\n#### {{< fa brands windows >}} Windows\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntouch _quarto.yml # <1>\n```\n:::\n\n1. This is CLI-speak for 'create this file'\n\n:::\n\nThis should create a file called `_quarto.yml` in the top-level of your RStudio project.\n\n### 4. Draft the YAML\n\nNext, as you did with the `.gitignore`, use the \"Files\" pane of RStudio to open this file. **Copy/paste _all_ of the following into that file**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproject:\n  type: website\n  execute-dir: project\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nexecute: \n  freeze: auto\n\nwebsite:\n  title: \"My Website\" # <1>\n  repo-url: https://github.com/lter/workshop-quarto # <2>\n  repo-actions: [issue]\n  navbar:\n    background: primary\n    left:\n      - text: \"Home\"\n        href: index.qmd\n    right: \n      - icon: github\n        href: https://github.com/lter/workshop-quarto # <3>\n  page-footer: \n    center: \"Copyright 2025, LTER Network\" # <4>\n    background: secondary\n\nformat:\n  html:\n    toc: true\n    link-external-newwindow: true\n    link-external-icon: false\n```\n:::\n\n1. Feel free to edit this part! It defines the website title that appears on the left side of the navbar with Quarto.\n2. Change this link to your GitHub repository's link\n3. Edit this link to the same destination as \\#2\n4. Change this to be the current year and your name\n\nThis YAML will tell GitHub (through Quarto) that you want a simple website with a homepage made from the content of `index.qmd` and a GitHub logo in the top right corner that takes website visitors to the GitHub repository that hosts the website.\n\n### 5. GitHub Housekeeping\n\nWe want this to be a Quarto website so we also need to tell GitHub not to use \"Jekyll\". Jekyll is the default website generation tool for GitHub and would involve extra processing we don't want. We can do this by running the following {{< fa terminal >}} command line snippet.\n\n:::{.panel-tabset}\n#### {{< fa brands apple >}} Mac / {{< fa brands linux >}} Linux\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntouch .nojekyll\n```\n:::\n\n\n#### {{< fa brands windows >}} Windows\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntouch .nojekyll\n```\n:::\n\n\n:::\n\nThere won't actually be anything in this file but the name is enough for GitHub to change its behavior.\n\n### 6. Test it Locally\n\nTo make sure that everything is set up properly so far, it is good practice to create the website on your computer (i.e., \"locally\") before continuing. We can do this with an operating system-agnostic {{< fa terminal >}} command line snippet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto preview\n```\n:::\n\n\nThis should create a new tab in your default browser application that shows a living version of what your website will look like after GitHub starts hosting it. The preview will keep going until you manually stop it (from the Terminal pane in RStudio) so feel free to make tweaks to either `_quarto.yml` or `index.qmd` while the preview is running. The preview will update a few moments after you save your edits to either of those files.\n\n### 7. Render the Website\n\nOnce you're happy with the preview, it's a good call to completely render the website just to make sure all of your most recent edits are reflected. You can do this with the following {{< fa terminal >}} command line code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto render\n```\n:::\n\n\nThis may create a `docs/` folder and a `_freeze/` folder depending on whether you have code chunks in `index.qmd` (or anything else requiring computing power). `docs/` will show up in your file explorer but _not_ the \"Git\" pane of RStudio because of your edits during step 1. `_freeze/` should show up in both locations.\n\n### 8. Commit & Push!\n\nOnce you've done the preceding steps, **Commit the following things: **\n\n1. Your changes to the `.gitignore`\n2. `index.qmd`\n3. `_quarto.yml` \n4. `.nojekyll`\n5. `_freeze/` folder and _all_ of its contents\n    - If it exists\n\n**After you've committed these, push them up to the GitHub repository!**\n\n## Activity - Try it Out\n\n:::{.callout-note}\n### Your Turn!\n\nLet's take a break while each of you works through the above tutorial on your own computers!\n\nOnce everyone has the fundamental structure of a website created and in GitHub we can move on to \"deployment\" which turns this collection of files into a living website!\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}