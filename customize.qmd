---
title: "Customizing a Website"
---

## Module Learning Objectives

By the end of this module, you will be able to:

- <u>Identify</u> components of SCSS stylesheets
- <u>Describe</u> key code syntax differences between SCSS and R code
- <u>Use</u> SCSS stylesheets to customize a deployed Quarto website

## SCSS Background

Technically, when we render a Quarto project we are asking Quarto to convert the `.qmd` file into `.html` and apply a CSS (<u>C</u>ascading <u>S</u>tyle <u>S</u>heets) stylesheet. This is why your deployed website up to this point has had a blue navbar, a white background, and black text (to name a few theme elements governed by the implied CSS stylesheet).

Quarto supports us making our own, customized stylesheets with [SCSS](https://sass-lang.com/) (<u>S</u>assy CSS; pronounced "sass") to tailor the look and feel of our website to exactly our personal preference. These files are written in a combination of CSS and SCSS so the syntax might look a little alien to you but this workshop will try to provide a useful level of practical detail for you to engage with these stylesheets even if this is your first foray into that world.

:::{.callout-note}
#### R Versus SCSS Comparison

If you're an R coder, it might be helpful to compare how R assigns values to objects versus how SCSS binds values to variables as well as how to write a comment (i.e., a non-coding line).

{{< fa brands r-project >}} R code
```
# Comment
object <- value
```

{{< fa brands sass >}} Sass code
```
// Comment
$object: value;
```
:::

## Create SCSS Stylesheets

### Create the Files


### Choose Colors



### Choose a Font



## Integrate into Website

### 1. Add the Stylesheets to `_quarto.yml`




### 2. Test it Locally

This step can be especially critical when fiddling with (that's the technical term) colors for your website. Use the preview extensively to be sure you're happy with your chosen color palette. We can start a preview session with an operating system-agnostic {{< fa terminal >}} command line snippet.

```{r preview-site}
#| eval: false

quarto preview
```

:::{.callout-warning}
#### Remember to End the Preview!

**The preview will keep going until you manually stop it** so be sure to stop it (by click the stop sign icon in the Terminal pane in RStudio) when you're ready to move on.

:::

### 3. Render the Website

Once you're happy with the preview, completely render the website to make sure all of your most recent edits are reflected. You can do this with the following {{< fa terminal >}} command line code.

```{r render-site}
#| eval: false

quarto render
```

### 4. Commit & Push!

Once you've done the preceding steps, **Commit the following things: **

1. Your new `.scss` files
2. Any changes to `_quarto.yml`
3. Any changes to `_freeze/` 
    - If there are any

After you've committed these, **push them up to the GitHub repository!**

### 5. Allow the GitHub Action to Complete

As with adding pages to your site, give the GitHub Action a minute to complete and you should see your website sporting the lovely colors and font that you picked out!

:::{.callout-warning}
#### Site Not Updating? Refresh the Page!

If your site is not updating but you've followed the above steps (and the GitHub Action is finished), you might try closing the page and re-opening it or refreshing the page. Sometimes it takes a moment for updates to the site to be visible if you opened the page before the GitHub Action is complete or as it completes and refreshing the page can fix it in this case.

:::

## Activity - Try it Out

:::{.callout-note}
### Your Turn!

Let's take a break while each of you fleshes out your custom stylesheets!

:::

## Additional Information

- UCSB Master of Environmental Data Science (MEDS) "[Customizing Quarto Websites](https://ucsb-meds.github.io/EDS-296-DS-portfolios/course-materials/week2-customizing-websites.html)" lesson
    - [Lecture slides](https://ucsb-meds.github.io/customizing-quarto-websites/#/title-slide) for that lesson
