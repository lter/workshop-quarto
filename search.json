[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "This workshop covers how to use Quarto–a tool developed by Posit–to create easily customizable websites and host those sites on GitHub. Quarto includes a variety of user-friendly tools including a visual editor that allows users to insert headings and embed figures via buttons that are intuitively labeled rather than through somewhat arcane HTML text or symbols. Creating websites using Quarto is very similar to any other work in RStudio so many of your existing technical skills will likely serve you well here.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Overview",
    "section": "",
    "text": "This workshop covers how to use Quarto–a tool developed by Posit–to create easily customizable websites and host those sites on GitHub. Quarto includes a variety of user-friendly tools including a visual editor that allows users to insert headings and embed figures via buttons that are intuitively labeled rather than through somewhat arcane HTML text or symbols. Creating websites using Quarto is very similar to any other work in RStudio so many of your existing technical skills will likely serve you well here.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#workshop-preparation",
    "href": "index.html#workshop-preparation",
    "title": "Overview",
    "section": "Workshop Preparation",
    "text": "Workshop Preparation\nTo follow along with this workshop you will need to take the following steps:\n\n1. Prepare to use GitHub via RStudio\nThis involves doing all of the pre-workshop steps relevant to our “Collaborative Coding with GitHub” workshop.\n\nInstall R\nInstall RStudio\nInstall Git\nMake a GitHub account\nConnect Git and GitHub\nCelebrate!\n\n\n\n2. Install Quarto\nBefore you can make a website with Quarto you will need to install it! This program seamlessly ties into RStudio so you won’t need to learn how to navigate a new program.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#note-on-code-snippets",
    "href": "index.html#note-on-code-snippets",
    "title": "Overview",
    "section": "Note on Code Snippets",
    "text": "Note on Code Snippets\nNote that while most facets of this workshop can be accomplished via RStudio or GitHub, there are some code commands that must be run. These commands are mostly Command Line Interface (CLI) not R code! To make this as clear as possible, if the plain text instructions have this symbol  they should be run in the “Terminal” pane of RStudio while R code–if any–will have this symbol .\nThe “Terminal” pane of RStudio should be next to the “Console” pane of RStudio (see below). If you don’t have that pane, you can make a new one using the keyboard shortcut Alt + Shift + R (Windows) or Option + Shift + R (Mac). Alternately you can open a file in the top-level of your RStudio project then click through the following menu items at the top of the screen: “Code”  “Terminal”  “Open New Terminal at File Location”.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#additional-information",
    "href": "index.html#additional-information",
    "title": "Overview",
    "section": "Additional Information",
    "text": "Additional Information\nQuarto is developing at a rapid pace so quality of life changes and new functionalities are introduced relatively frequently. Additionally, Quarto supports user-created “extensions” that can be downloaded in a given project and then used (similar to the way user-developed R packages can be shared) so if you want to do something that Quarto itself doesn’t support, chances are you’ll be able to find an extension that handles it.\nQuarto’s documentation of website creation and formatting is extremely thorough and is a great resource as you become more comfortable with your new website.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "customize.html",
    "href": "customize.html",
    "title": "Customizing a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:",
    "crumbs": [
      "Advanced Topics",
      "Customize a Website"
    ]
  },
  {
    "objectID": "customize.html#module-learning-objectives",
    "href": "customize.html#module-learning-objectives",
    "title": "Customizing a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:",
    "crumbs": [
      "Advanced Topics",
      "Customize a Website"
    ]
  },
  {
    "objectID": "customize.html#tbd",
    "href": "customize.html#tbd",
    "title": "Customizing a Website",
    "section": "TBD",
    "text": "TBD\nUnder construction; check back later!",
    "crumbs": [
      "Advanced Topics",
      "Customize a Website"
    ]
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nExplain why Quarto is useful in this context\nDefine the three critical parts of a Quarto file\nDescribe why some Quarto projects use a single YAML file across multiple Quarto documents",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#module-learning-objectives",
    "href": "background.html#module-learning-objectives",
    "title": "Background",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nExplain why Quarto is useful in this context\nDefine the three critical parts of a Quarto file\nDescribe why some Quarto projects use a single YAML file across multiple Quarto documents",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#why-quarto",
    "href": "background.html#why-quarto",
    "title": "Background",
    "section": "Why Quarto",
    "text": "Why Quarto\nQuarto is new software developed by Posit–the company that maintains RStudio. Quarto is extremely versatile and supports several progamming languages. Quarto documents are structurally similar to RMarkdown files (more on this later) but is more efficient and easily supports a variety of ‘bells and whistles’ that makes it worthwhile to embrace.\nThis workshop uses Quarto for the following reasons:\n\nThe learning curve for novice coders is relatively gentle\n\nMuch R knowledge and intuition is directly transferable!\n\nMaking a (simple) website is straightforward\nQuarto can be used in a variety of applications\n\nSo learning it here will give you tools you can apply elsewhere!\n\n\nIf you’re broadly curious about Quarto, check out their website, quarto.org.",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#core-components-of-a-quarto-file",
    "href": "background.html#core-components-of-a-quarto-file",
    "title": "Background",
    "section": "Core Components of a Quarto File",
    "text": "Core Components of a Quarto File\nQuarto documents are a type of “computational notebook” like RMarkdown files and–for python coders–Jypter Notebooks. These notebook files can include runnable-code as well as plain text description of that code. Often, notebooks are used to simultaneously run a given code workflow while embedding the documentation for that workflow in the same file; this can be a great choice for reproducibility!\nNotebook files contain three fundamental components that allow them to be “rendered” (sometimes also called “knit”) to produce a new static report file. This is often a PDF or an HTML file though for website purposes we’ll be using the HTML version so that each notebook file can become a page in your website.\nTypically, these notebooks have three structural components:\n\nYAML\n\nPronounced [ YEAH-mull ]\n\nEmbedded code chunks\nPlain text\n\nPossibly formatted with Markdown syntax\n\n\n\nYAMLPlain Text\n\n\nThe YAML (Yet Another Markup Language) defines document-level metadata. Most fundamentally, the YAML defines what file type will be produced when the report is rendered. It can also be used to define the top-level title, author, and date information. Finally, it can change the default options for code chunks throughout the document (more on code chunk options elsewhere).\nDifferent notebook file types will specify the YAML differently but in both Quarto documents and R Markdown files, the YAML is defined in the first few lines of the report and starts/ends with a line containing three hyphens. This looks something like this:\n---\ntitle: \"Reproducible Reports\"\noutput: html_document\n---\nAmong other roles, the YAML defines what type of output file is produced when the notebook is “rendered” (a.k.a. “knit”). Most commonly this is either a single PDF or HTML file but more complex YAMLs can be used to create full websites or scientific manuscripts!\n\n\nThe text outside of the YAML and code chunks is plain text that accepts Markdown syntax to accomplish text format tweaks. Dedicated text-formatting software (e.g., Microsoft Word, Gmail, etc.) provides buttons and hot keys for these sorts of format alterations but many programming IDEs do not provide such user interface elements.1 Markdown syntax is used to support this same functionality.\nSome fundamental Markdown options include:\n\n**bold text**  bold text\n_italic text_  italic text\n`code text`  code text\n[hyperlinked text](https://lter.github.io/ssecr/mod_reports.html)  hyperlinked text\n\nFor a more complete glossary of fundamental Markdown syntax options see here. You may also want to explore the ‘back end’ of this workshop’s website as every page is built using Quarto documents.\nThe code chunks embedded in notebooks are essentially a fragmented script containing runable code. These chunks may contain code and/or comments and share an environment with one another when rendered (i.e., if you load a particular library in one chunk you’ll be able to use functions from that library in subsequent chunks). When used in concert with the Markdown text in a given notebook the code chunks can be used to effectively demonstrate a workflow while providing as much human-readable context as is desired.\nIn Quarto documents, code chunks look like this2:\n\\```{r demo-chunk}\n1#| echo: true\n\n2# Round pi to 2 digits\nround(x = pi, digits = 2)\n\\```\n\n1\n\nYou may specify chunk-specific options using this syntax (i.e., #| option_name: option_setting). Options you want to apply to all chunks across a notebook should be specified once in the YAML and can exclude the leading #| bit of the format.\n\n2\n\nIf your Markdown text provides sufficient context you may exclude comments in code chunks but opinions differ on which is “more” appropriate\n\n\n# Round pi to 2 digits\nround(x = pi, digits = 2)",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#website-yamls",
    "href": "background.html#website-yamls",
    "title": "Background",
    "section": "Website YAMLs",
    "text": "Website YAMLs\nWhen working in a single Quarto document, that document needs its own YAML so that Quarto ‘knows’ how to render it (and into what!). However, for multi-document projects like websites, this would be intensely cumbersome because every page would need extensive YAML information so that each document showed up where you expected it and all formatting was consistent across documents.\nTo solve this problem Quarto uses a single YAML file for these larger projects that controls project-wide (i.e., across-document) formatting and structure. You can still use the YAML section within a single document if you want it to behave differently from other pages but any formatting you want to apply across all pages should be specified in this cross-document YAML.\nWe’ll discuss what goes into that project-wide YAML in the next workshop module but for now it is only important you understand its general purpose and know that it must always be named _quarto.yml for it to work as you expect.",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#footnotes",
    "href": "background.html#footnotes",
    "title": "Background",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that with the addition of the “Visual” tab in RStudio there are button options for many text format changes. Markdown syntax is still useful to know for general knowledge reasons though! #### Code Chunks↩︎\nNormally code chunks start and end with three backticks (```) but to embed this code chunk example we need to “escape” the first backtick (using a backslash) so that the notebook interprets it correctly.↩︎",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "create.html",
    "href": "create.html",
    "title": "Creating a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nUse GitHub to make a new repository\nCreate a Quarto website\nEdit files hosted on GitHub via RStudio",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#module-learning-objectives",
    "href": "create.html#module-learning-objectives",
    "title": "Creating a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nUse GitHub to make a new repository\nCreate a Quarto website\nEdit files hosted on GitHub via RStudio",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#make-a-new-github-repository",
    "href": "create.html#make-a-new-github-repository",
    "title": "Creating a Website",
    "section": "Make a New GitHub Repository",
    "text": "Make a New GitHub Repository\nFrom your GitHub “Repositories” tab, click the “New” button. It may be either blue or green depending on your GitHub settings.\n\nPick a name for your repository and add a description. Also, set the repository to “Public”; only public repositories can be turned into websites.\n\n\n\n\n\n\nRepository Names & Website URLs\n\n\n\nNote that the name you pick for your repository (and who owns it) has a big impact on the URL for the website hosted there! See an example below for how those pieces of information get translated.\ngithub.com/owner/repository        owner.github.io/repository\nSo, think about a repository name that will make your URL informative without being overly long if someone needs to type it manually.\n\n\n\n\n\n\n\n\nRepository Name / URL Exception\n\n\n\nThere is one critical exception to the above rule for how the website URL is related to the GitHub repository’s name!\nIf you name a repository “owner.github.io” (so the repository link is “github.com/owner/owner.github.io”) then the website’s URL is simplified to be the same as the repository name (i.e., “owner.github.io”).\nFor example, the repository github.com/njlyon0/njlyon0.github.io hosts the website njlyon0.github.io.\n\n\n\n\n\nOnce that is done, scroll down and decide whether to add (1) a README, (2) a .gitignore, and (3) a license. For Quarto websites, you will want a README and a .gitignore but a license is not required. If you are an RStudio user, you should pick the “R” template for your .gitignore. For more information on READMEs see here; for more information on the .gitignore see here.\n\n\n\nOnce you’ve added these two things, scroll down and click the “Create repository” button. Again, this may be either blue or green.\nAfter a few seconds you should be placed on your new repository’s landing page.",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#clone-that-repository",
    "href": "create.html#clone-that-repository",
    "title": "Creating a Website",
    "section": "Clone that Repository",
    "text": "Clone that Repository\nNow that you have created a repository, we need to clone it locally so we can create the content we want in RStudio. First, open RStudio and click the project button in the top right corner. If you use RStudio projects already, this will be the name of your current project. If you do not use projects it will say “Project: (None)”.\n\n\n\nWhen you click that button you should see a small menu appear. You should click “New Project…” (the topmost option). Note that if you use projects you’ll see a list of up to the 10 most recent projects filling out the rest of this menu.\n\n\n\nThis will create a pop-up window in front of RStudio where you can decide what kind of project you want to create. Because we’re cloning from an existing GitHub repository, click “Version Control”.\n\n\n\nIn the next window, choose “Git”.\n\n\n\nBefore we address the next dialog window, go back to the landing page for the GitHub repository you’d like to clone. Click the “Code” button and copy the link. The “Code” button will likely be either blue or green. In the example image below we’re using a repository that has just been created but the process is the same for repositories that already have work in them.\n\n\n\nNow, return to RStudio and paste the link that you just copied into the top field of the new project pop-up menu. You must also pick a name for your project locally as well as deciding where on your computer you’d like the local copies to live. Feel free to name the project whatever you’d like so that you will be easily able to find it later.\n\n\n\nOnce you’re happy with your entries to those fields, Click “Create Project”. You’ll know this has worked when the top right of RStudio has whatever name you entered in the second field of the preceding menu. Also, you should now have a “Git” tab in your RStudio.",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#start-creating-the-website",
    "href": "create.html#start-creating-the-website",
    "title": "Creating a Website",
    "section": "Start Creating the Website",
    "text": "Start Creating the Website\nNow we’ve cloned the GitHub repository where we want the repository to live, we can create the critical website architecture. These steps are best handled sequentially but are semi-independent of one another so see the following numbered sub-headings for more instructions.\n\n1. Add to the .gitignore\nUsing the “Files” pane of RStudio, open the .gitignore file. Scroll to the bottom and add the following lines beneath whatever is already in there. Those two folders are important in creating a Quarto website but we don’t want Git to track changes to the files that they contain.\n\n# Ignore unneeded Quarto folders\n/.quarto/\ndocs/\n\n\n\n\n\n\n\nOther Good .gitignore Additions\n\n\n\nYou might also consider adding the following to your .gitignore. This well help keep your repository free of unneeded contents as the website grows.\n\n# R Project\n*.Rproj\n\n# Mac files\n.DS_Store\n\n\n\n\n\n2. Create the Website Homepage\nNow we’ll make what will become the home page of your website! Create a new Quarto file (“File”  “New File”  “Quarto Document…”). In the resulting pop-up menu you can leave everything at its default position and click “Create”.\nSave that file as index.qmd. Technically it doesn’t matter where in your project folder it lives but typically you’d leave it in the top level folder (i.e., not in a sub-folder).\n\n\n\n\n\n\nNote on the File Name\n\n\n\nThis file must be named exactly as indicated above. All lowercase “index” and it is a .qmd file.\n\n\n\n\n3. Make a YAML File\nNow, as discussed in the Quarto Background module, Quarto documents–like many computational notebook files–are controlled by a YAML. In the case of RMarkdown, the YAML is a component of each .Rmd file. Quarto supports that functionality for single-file formatting but also supports a single over-arching YAML file to control the structure of a whole project, in this case: a website!\nSo, in the  Terminal pane of RStudio, run the following command to create the needed type of file with the right name. Note there is a slight difference depending on your operating system so be sure to use the right one!\n\n Mac /  Linux Windows\n\n\n\n1touch _quarto.yml\n\n\n1\n\ntouch is CLI-speak for ‘create this file’\n\n\n\n\n\n\n\n1copy NUL _quarto.yml\n\n\n1\n\nThis is CLI-speak for ‘create this file’\n\n\n\n\n\n\n\nThis should create a file called _quarto.yml in the top-level of your RStudio project.\n\n\n4. Draft the YAML\nNext, as you did with the .gitignore, use the “Files” pane of RStudio to open this file. Copy/paste all of the following into that file.\n\nproject:\n  type: website\n  execute-dir: project\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nexecute: \n  freeze: auto\n\nwebsite:\n1  title: \"My Website\"\n2  repo-url: https://github.com/lter/workshop-quarto\n  repo-actions: [issue]\n  navbar:\n    background: primary\n    left:\n      - text: \"Home\"\n        href: index.qmd\n    right: \n      - icon: github\n3        href: https://github.com/lter/workshop-quarto\n  page-footer: \n4    center: \"Copyright 2025, LTER Network\"\n    background: secondary\n\nformat:\n  html:\n    toc: true\n    link-external-newwindow: true\n    link-external-icon: false\n\n\n1\n\nFeel free to edit this part! It defines the website title that appears on the left side of the navbar with Quarto.\n\n2\n\nChange this link to your GitHub repository’s link\n\n3\n\nEdit this link to the same destination as #2\n\n4\n\nChange this to be the current year and your name\n\n\n\n\nThis YAML will tell GitHub (through Quarto) that you want a simple website with a homepage made from the content of index.qmd and a GitHub logo in the top right corner that takes website visitors to the GitHub repository that hosts the website.\n\n\n5. GitHub Housekeeping\nWe want this to be a Quarto website so we also need to tell GitHub not to use “Jekyll”. Jekyll is the default website generation tool for GitHub and would involve extra processing we don’t want. We can do this by running the following  command line snippet.\n\n Mac /  Linux Windows\n\n\n\ntouch .nojekyll\n\n\n\n\ncopy NUL .nojekyll\n\n\n\n\nThere won’t actually be anything in this file but the name is enough for GitHub to change its behavior.\n\n\n6. Test it Locally\nTo make sure that everything is set up properly so far, it is good practice to create the website on your computer (i.e., “locally”) before continuing. We can do this with an operating system-agnostic  command line snippet.\n\nquarto preview\n\nThis should create a new tab in your default browser application that shows a living version of what your website will look like after GitHub starts hosting it. The preview will keep going until you manually stop it (from the Terminal pane in RStudio) so feel free to make tweaks to either _quarto.yml or index.qmd while the preview is running. The preview will update a few moments after you save your edits to either of those files.\n\n\n7. Render the Website\nOnce you’re happy with the preview, it’s a good call to completely render the website just to make sure all of your most recent edits are reflected. You can do this with the following  command line code.\n\nquarto render\n\nThis may create a docs/ folder and a _freeze/ folder depending on whether you have code chunks in index.qmd (or anything else requiring computing power). docs/ will show up in your file explorer but not the “Git” pane of RStudio because of your edits during step 1. _freeze/ should show up in both locations.\n\n\n8. Commit & Push!\nOnce you’ve done the preceding steps, Commit the following things: \n\nYour changes to the .gitignore\nindex.qmd\n_quarto.yml\n.nojekyll\n_freeze/ folder and all of its contents\n\nIf it exists\n\n\nAfter you’ve committed these, push them up to the GitHub repository!",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#activity---try-it-out",
    "href": "create.html#activity---try-it-out",
    "title": "Creating a Website",
    "section": "Activity - Try it Out",
    "text": "Activity - Try it Out\n\n\n\n\n\n\nYour Turn!\n\n\n\nLet’s take a break while each of you works through the above tutorial on your own computers!\nOnce everyone has the fundamental structure of a website created and in GitHub we can move on to “deployment” which turns this collection of files into a living website!",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "deploy.html",
    "href": "deploy.html",
    "title": "Deploying a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nDefine “deploy” in the context of Quarto websites\nDescribe the purpose of GitHub Actions (GHAs)\nUse a GHA to deploy a Quarto website",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#module-learning-objectives",
    "href": "deploy.html#module-learning-objectives",
    "title": "Deploying a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nDefine “deploy” in the context of Quarto websites\nDescribe the purpose of GitHub Actions (GHAs)\nUse a GHA to deploy a Quarto website",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#deployment-options",
    "href": "deploy.html#deployment-options",
    "title": "Deploying a Website",
    "section": "Deployment Options",
    "text": "Deployment Options\nUnder construction; check back later!",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#github-actions-ghas",
    "href": "deploy.html#github-actions-ghas",
    "title": "Deploying a Website",
    "section": "GitHub Actions (GHAs)",
    "text": "GitHub Actions (GHAs)\nUnder construction; check back later!",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#set-up-a-quarto-website-deployment-gha",
    "href": "deploy.html#set-up-a-quarto-website-deployment-gha",
    "title": "Deploying a Website",
    "section": "Set Up a Quarto Website Deployment GHA",
    "text": "Set Up a Quarto Website Deployment GHA\n\n1. Make a gh-pages Branch\nGitHub “branches” are typically short-lived developent spaces that operate parallel to the ‘main’ branch of a repository. The main branch is either called main or master (for older repositories) and if you don’t think you are using branches, you are at least using main! Branches are not the focus of this workshop but if you’d like to learn more, check out the relevant module of the SciComp GitHub workshop.\nFor deploying a Quarto website though we’ll create a gh-pages branch that we will never have to work on directly! Once this branch exists, we’ll set up a GitHub action that renders your website into this branch and deploys from there. Doing this means you will rarely have to render your site on your machine and can instead trust the magic of GitHub Actions to transform your edits into a living website on its own.\nTo begin, go to your repository’s home page. Once there, click the “1 Branch” button. It is in the same row of buttons as the “Code” button. Note that you can see your current branch name (likely main) just to the left of that button.\n\n\n\nIn the resulting page, click the “New Branch” button. As with the “Code” button, it will be either blue or green depending on your GitHub settings.\n\n\n\nA small pop-up window will appear with an empty text field for you to enter the name of your branch. Type exactly “gh-pages” and click “Create new branch”. The following steps will not work if you type something other than gh-pages (hyphen between “gh” and “pages). Also note that you can make the”gh-pages” branch in RStudio and push it up to this repository but making this branch through GitHub and pulling it to your computer is more straightforward.\n\n\n\nOnce you’ve done that, the pop-up window should close and you should find yourself back on the ‘branches’ page but there will now be two active branches: main (or master) and gh-pages!\n\n\n\nYou can now return to your repository’s landing page. You may see an orange circle or a check mark that is either blue or green next to the most recent commit message but we can safely ignore this for now.\n\n\n\n\n\n2. Pull the New Branch\nReturn to your local clone of this repository (i.e., the relevant RStudio project) and pull. This should change nothing but now your RStudio ‘knows’ that the repository has two branches. Note that if you instead make the new branch in RStudio you’d instead push that branch up to GitHub at this point.\n\n\n3. Create the Local Part of a GHA\nNow that GitHub is properly set up, we need to define our desired GitHub Action. We do this by creating a new file locally in a particular file path then committing and pushing that file. Interestingly, the type of file that controls GHA settings is actually another YAML file!\nSo, in the  Terminal pane of RStudio, run the following commands to create the needed file path and the GitHub Action’s YAML file with the right name. Note there is a slight difference depending on your operating system so be sure to use the right one!\n\n Mac /  Linux Windows\n\n\n\n1mkdir .github\nmkdir .github/workflows\ntouch .github/workflows/publish.yml \n\n\n1\n\nmkdir is CLI-speak for ‘make this folder’\n\n\n\n\n\n\n\n1mkdir .github\nmkdir .github/workflows\ncopy NUL .github/workflows/publish.yml\n\n\n1\n\nmkdir is CLI-speak for ‘make this folder’\n\n\n\n\n\n\n\nOne publish.yml exists on your computer, use the “Files” pane of RStudio to navigate to the file and open it. When you have it open, copy/paste all of the following into that file.\n\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v3\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n\n\n4. Commit & Push publish.yml to GitHub\nOnce you have created publish.yml and put the necessary stuff into it, commit the new file and push it! Be sure that it is in the correct file path (i.e., “.github”  “workflows”  “publish.yml”).\n\n\n5. Watch the GitHub Action Work\nAfter you push publish.yml, return to your repository landing page and you should see an orange circle next to that commit message.\n\n\n\nIf you click the “Actions” tab at the top of the repository’s landing page you can get more specific information about the GitHub Action’s progress.\n\n\n\nAt first, there will be a progress circle next to a “workflow run” that has the same name as the most recent commit. When that finishes it will be replaced by a check mark. Once this finishes, a new action called “pages build and deployment” will automatically start. Once that action is done, you should have an updated website!\n\n\n\nIf you don’t want to watch the actions complete from the “Actions” tab, you can check their status from the repository landing page; a circle means one of those actions is in progress and a checkmark indicates they are finished.\n\n\n\n\n\n6. Make the Website Link More Accessible\nAfter the GitHub Action completes, your website is live but you’ll need to take an extra step to make that link directly accessible from the landing page of the repository. To start click the gear () icon next to “About” in the right sidebar of the repository.\n\n\n\nIn the resulting pop-up menu, check the box for “Use your GitHub Pages website” under the “Website” field. Feel free to customize the other fields however you’d like! When you’re done, click the “Save changes” button to close this menu and update your “About” sidebar.\n\n\n\nYou should now see the website in the “About” sidebar of the repository!\n\n\n7. Pull Updates Locally\nAs with any other time when you work in your GitHub repository, you should now pull the latest changes to your local clone. This is unlikely to be the cause of a conflict because (A) no files have changed since you last pushed and (B) the only edits in the gh-pages branch should be whatever the GitHub Action does behind the scenes. However, it’s still good practice to pull regularly!\nRStudio should return a message like the following:\n\n\n\nEssentially this just means the your local gh-pages branch is now caught up with the website rendering / deployment that you set up GitHub to do on your behalf.",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#activity---try-it-out",
    "href": "deploy.html#activity---try-it-out",
    "title": "Deploying a Website",
    "section": "Activity - Try it Out",
    "text": "Activity - Try it Out\n\n\n\n\n\n\nYour Turn!\n\n\n\nLet’s take a break while each of you works through the above tutorial on your own computers!\nOnce everyone has a working GitHub Action established we can move on to talking about how to add pages to the site and customize some formatting elements.",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  }
]