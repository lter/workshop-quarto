[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "This workshop covers how to use Quarto–a tool developed by Posit–to create easily customizable websites and host those sites on GitHub. Quarto includes a variety of user-friendly tools including a visual editor that allows users to insert headings and embed figures via buttons that are intuitively labeled rather than through somewhat arcane HTML text or symbols. Creating websites using Quarto is very similar to any other work in RStudio so many of your existing technical skills will likely serve you well here.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Overview",
    "section": "",
    "text": "This workshop covers how to use Quarto–a tool developed by Posit–to create easily customizable websites and host those sites on GitHub. Quarto includes a variety of user-friendly tools including a visual editor that allows users to insert headings and embed figures via buttons that are intuitively labeled rather than through somewhat arcane HTML text or symbols. Creating websites using Quarto is very similar to any other work in RStudio so many of your existing technical skills will likely serve you well here.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#workshop-preparation",
    "href": "index.html#workshop-preparation",
    "title": "Overview",
    "section": "Workshop Preparation",
    "text": "Workshop Preparation\nTo follow along with this workshop you will need to take the following steps:\n\n1. Prepare to use GitHub via RStudio\nThis involves doing all of the pre-workshop steps relevant to our “Collaborative Coding with GitHub” workshop.\n\nInstall R\nInstall RStudio\nInstall Git\nMake a GitHub account\nConnect Git and GitHub\nCelebrate!\n\n\n\n2. Install Quarto\nBefore you can make a website with Quarto you will need to install it! This program seamlessly ties into RStudio so you won’t need to learn how to navigate a new program.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#note-on-code-snippets",
    "href": "index.html#note-on-code-snippets",
    "title": "Overview",
    "section": "Note on Code Snippets",
    "text": "Note on Code Snippets\nNote that while most facets of this workshop can be accomplished via RStudio or GitHub, there are some code commands that must be run. These commands are mostly Command Line Interface (CLI) not R code! To make this as clear as possible, if the plain text instructions have this symbol  they should be run in the “Terminal” pane of RStudio while R code–if any–will have this symbol .\nThe “Terminal” pane of RStudio should be next to the “Console” pane of RStudio (see below). If you don’t have that pane, you can make a new one using the keyboard shortcut Alt + Shift + R (Windows) or Option + Shift + R (Mac). Alternately you can open a file in the top-level of your RStudio project then click through the following menu items at the top of the screen: “Code”  “Terminal”  “Open New Terminal at File Location”.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "index.html#additional-information",
    "href": "index.html#additional-information",
    "title": "Overview",
    "section": "Additional Information",
    "text": "Additional Information\nQuarto is developing at a rapid pace so quality of life changes and new functionalities are introduced relatively frequently. Additionally, Quarto supports user-created “extensions” that can be downloaded in a given project and then used (similar to the way user-developed R packages can be shared) so if you want to do something that Quarto itself doesn’t support, chances are you’ll be able to find an extension that handles it.\nQuarto’s documentation of website creation and formatting is extremely thorough and is a great resource as you become more comfortable with your new website.",
    "crumbs": [
      "Workshop Home"
    ]
  },
  {
    "objectID": "customize.html",
    "href": "customize.html",
    "title": "Customizing a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:",
    "crumbs": [
      "Advanced Topics",
      "Customize a Website"
    ]
  },
  {
    "objectID": "customize.html#module-learning-objectives",
    "href": "customize.html#module-learning-objectives",
    "title": "Customizing a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:",
    "crumbs": [
      "Advanced Topics",
      "Customize a Website"
    ]
  },
  {
    "objectID": "customize.html#tbd",
    "href": "customize.html#tbd",
    "title": "Customizing a Website",
    "section": "TBD",
    "text": "TBD\nUnder construction; check back later!",
    "crumbs": [
      "Advanced Topics",
      "Customize a Website"
    ]
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Background",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nDefine the three critical parts of a Quarto file",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#module-learning-objectives",
    "href": "background.html#module-learning-objectives",
    "title": "Background",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nDefine the three critical parts of a Quarto file",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "background.html#core-components-of-a-quarto-file",
    "href": "background.html#core-components-of-a-quarto-file",
    "title": "Background",
    "section": "Core Components of a Quarto File",
    "text": "Core Components of a Quarto File",
    "crumbs": [
      "Core Topics",
      "Quarto Background"
    ]
  },
  {
    "objectID": "create.html",
    "href": "create.html",
    "title": "Creating a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nUse GitHub to make a new repository\nCreate a Quarto website\nEdit files hosted on GitHub via RStudio",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#module-learning-objectives",
    "href": "create.html#module-learning-objectives",
    "title": "Creating a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:\n\nUse GitHub to make a new repository\nCreate a Quarto website\nEdit files hosted on GitHub via RStudio",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#make-a-new-github-repository",
    "href": "create.html#make-a-new-github-repository",
    "title": "Creating a Website",
    "section": "Make a New GitHub Repository",
    "text": "Make a New GitHub Repository\nFrom your GitHub “Repositories” tab, click the “New” button. It may be either blue or green depending on your GitHub settings.\n\nPick a name for your repository and add a description. Also, set the repository to “Public”; only public repositories can be turned into websites.\n\n\n\n\n\n\nRepository Names & Website URLs\n\n\n\nNote that the name you pick for your repository (and who owns it) has a big impact on the URL for the website hosted there! See an example below for how those pieces of information get translated.\ngithub.com/owner/repository        owner.github.io/repository\nSo, think about a repository name that will make your URL informative without being overly long if someone needs to type it manually.\n\n\n\n\n\nOnce that is done, scroll down and decide whether to add (1) a README, (2) a .gitignore, and (3) a license. For Quarto websites, you will want a README and a .gitignore but a license is not required. If you are an RStudio user, you should pick the “R” template for your .gitignore. For more information on READMEs see here; for more information on the .gitignore see here.\n\n\n\nOnce you’ve added these two things, scroll down and click the “Create repository” button. Again, this may be either blue or green.\nAfter a few seconds you should be placed on your new repository’s landing page.",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#clone-that-repository",
    "href": "create.html#clone-that-repository",
    "title": "Creating a Website",
    "section": "Clone that Repository",
    "text": "Clone that Repository\nNow that you have created a repository, we need to clone it locally so we can create the content we want in RStudio. First, open RStudio and click the project button in the top right corner. If you use RStudio projects already, this will be the name of your current project. If you do not use projects it will say “Project: (None)”.\n\n\n\nWhen you click that button you should see a small menu appear. You should click “New Project…” (the topmost option). Note that if you use projects you’ll see a list of up to the 10 most recent projects filling out the rest of this menu.\n\n\n\nThis will create a pop-up window in front of RStudio where you can decide what kind of project you want to create. Because we’re cloning from an existing GitHub repository, click “Version Control”.\n\n\n\nIn the next window, choose “Git”.\n\n\n\nBefore we address the next dialog window, go back to the landing page for the GitHub repository you’d like to clone. Click the “Code” button and copy the link. The “Code” button will likely be either blue or green. In the example image below we’re using a repository that has just been created but the process is the same for repositories that already have work in them.\n\n\n\nNow, return to RStudio and paste the link that you just copied into the top field of the new project pop-up menu. You must also pick a name for your project locally as well as deciding where on your computer you’d like the local copies to live. Feel free to name the project whatever you’d like so that you will be easily able to find it later.\n\n\n\nOnce you’re happy with your entries to those fields, Click “Create Project”. You’ll know this has worked when the top right of RStudio has whatever name you entered in the second field of the preceding menu. Also, you should now have a “Git” tab in your RStudio.",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#start-creating-the-website",
    "href": "create.html#start-creating-the-website",
    "title": "Creating a Website",
    "section": "Start Creating the Website",
    "text": "Start Creating the Website\nNow we’ve cloned the GitHub repository where we want the repository to live, we can create the critical website architecture. These steps are best handled sequentially but are semi-independent of one another so see the following numbered sub-headings for more instructions.\n\n1. Add to the .gitignore\nUsing the “Files” pane of RStudio, open the .gitignore file. Scroll to the bottom and add the following lines beneath whatever is already in there. Those two folders are important in creating a Quarto website but we don’t want Git to track changes to the files that they contain.\n\n# Ignore unneeded Quarto folders\n/.quarto/\ndocs/\n\n\n\n2. Create the Website Homepage\nNow we’ll make what will become the home page of your website! Create a new Quarto file (“File”  “New File”  “Quarto Document…”). In the resulting pop-up menu you can leave everything at its default position and click “Create”.\nSave that file as index.qmd. Technically it doesn’t matter where in your project folder it lives but typically you’d leave it in the top level folder (i.e., not in a sub-folder).\n\n\n\n\n\n\nNote on the File Name\n\n\n\nThis file must be named exactly as indicated above. All lowercase “index” and it is a .qmd file.\n\n\n\n\n3. Make a YAML File\nNow, as discussed in the Quarto Background module, Quarto documents–like many computational notebook files–are controlled by a YAML. In the case of RMarkdown, the YAML is a component of each .Rmd file. Quarto supports that functionality for single-file formatting but also supports a single over-arching YAML file to control the structure of a whole project, in this case: a website!\nSo, in the  Terminal pane of RStudio, run the following command to create the needed type of file with the right name. Note there is a slight difference depending on your operating system so be sure to use the right one!\n\n Mac /  Linux Windows\n\n\n\n1touch _quarto.yml\n\n\n1\n\ntouch is CLI-speak for ‘create this file’\n\n\n\n\n\n\n\n1copy NUL _quarto.yml\n\n\n1\n\ntouch is CLI-speak for ‘create this file’\n\n\n\n\n\n\n\nThis should create a file called _quarto.yml in the top-level of your RStudio project.\n\n\n4. Draft the YAML\nNext, as you did with the .gitignore, use the “Files” pane of RStudio to open this file. Copy/paste all of the following into that file.\n\nproject:\n  type: website\n  execute-dir: project\n  output-dir: docs\n  render:\n    - \"*.qmd\"\n\nexecute: \n  freeze: auto\n\nwebsite:\n1  title: \"My Website\"\n2  repo-url: https://github.com/lter/workshop-quarto\n  repo-actions: [issue]\n  navbar:\n    background: primary\n    left:\n      - text: \"Home\"\n        href: index.qmd\n    right: \n      - icon: github\n3        href: https://github.com/lter/workshop-quarto\n  page-footer: \n4    center: \"Copyright 2025, LTER Network\"\n    background: secondary\n\nformat:\n  html:\n    toc: true\n    link-external-newwindow: true\n    link-external-icon: false\n\n\n1\n\nFeel free to edit this part! It defines the website title that appears on the left side of the navbar with Quarto.\n\n2\n\nChange this link to your GitHub repository’s link\n\n3\n\nEdit this link to the same destination as #2\n\n4\n\nChange this to be the current year and your name\n\n\n\n\nThis YAML will tell GitHub (through Quarto) that you want a simple website with a homepage made from the content of index.qmd and a GitHub logo in the top right corner that takes website visitors to the GitHub repository that hosts the website.\n\n\n5. GitHub Housekeeping\nWe want this to be a Quarto website so we also need to tell GitHub not to use “Jekyll”. Jekyll is the default website generation tool for GitHub and would involve extra processing we don’t want. We can do this by running the following  command line snippet.\n\n Mac /  Linux Windows\n\n\n\ntouch .nojekyll\n\n\n\n\ncopy NUL .nojekyll\n\n\n\n\nThere won’t actually be anything in this file but the name is enough for GitHub to change its behavior.\n\n\n6. Test it Locally\nTo make sure that everything is set up properly so far, it is good practice to create the website on your computer (i.e., “locally”) before continuing. We can do this with an operating system-agnostic  command line snippet.\n\nquarto preview\n\nThis should create a new tab in your default browser application that shows a living version of what your website will look like after GitHub starts hosting it. The preview will keep going until you manually stop it (from the Terminal pane in RStudio) so feel free to make tweaks to either _quarto.yml or index.qmd while the preview is running. The preview will update a few moments after you save your edits to either of those files.\n\n\n7. Render the Website\nOnce you’re happy with the preview, it’s a good call to completely render the website just to make sure all of your most recent edits are reflected. You can do this with the following  command line code.\n\nquarto render\n\nThis may create a docs/ folder and a _freeze/ folder depending on whether you have code chunks in index.qmd (or anything else requiring computing power). docs/ will show up in your file explorer but not the “Git” pane of RStudio because of your edits during step 1. _freeze/ should show up in both locations.\n\n\n8. Commit & Push!\nOnce you’ve done the preceding steps, Commit the following things: \n\nYour changes to the .gitignore\nindex.qmd\n_quarto.yml\n.nojekyll\n_freeze/ folder and all of its contents\n\nIf it exists\n\n\nAfter you’ve committed these, push them up to the GitHub repository!",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "create.html#activity---try-it-out",
    "href": "create.html#activity---try-it-out",
    "title": "Creating a Website",
    "section": "Activity - Try it Out",
    "text": "Activity - Try it Out\n\n\n\n\n\n\nYour Turn!\n\n\n\nLet’s take a break while each of you works through the above tutorial on your own computers!\nOnce everyone has the fundamental structure of a website created and in GitHub we can move on to “deployment” which turns this collection of files into a living website!",
    "crumbs": [
      "Core Topics",
      "Create a Website"
    ]
  },
  {
    "objectID": "deploy.html",
    "href": "deploy.html",
    "title": "Deploying a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#module-learning-objectives",
    "href": "deploy.html#module-learning-objectives",
    "title": "Deploying a Website",
    "section": "",
    "text": "By the end of this module, you will be able to:",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  },
  {
    "objectID": "deploy.html#tbd",
    "href": "deploy.html#tbd",
    "title": "Deploying a Website",
    "section": "TBD",
    "text": "TBD\nUnder construction; check back later!",
    "crumbs": [
      "Core Topics",
      "Deploy a Website"
    ]
  }
]